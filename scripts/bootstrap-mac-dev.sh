#!/usr/bin/env bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} [-hv] [-o[file]] args ...
#%
#% DESCRIPTION
#%    This is a wrapper script around newrelic API and newrelic cli commands to perform of the basic tasks.
#%    The script just serves as an example of some activities that can be performed by the cli.
#%    At the moment this is mainly management of deployment markers for our applications/services.
#%
#% OPTIONS
#%    -o [file], --output=[file]    Set log file (default=/dev/null)
#%                                  use DEFAULT keyword to autoname file
#%                                  The default value is /dev/null.
#%    -t, --timelog                 Add timestamp to log ("+%y/%m/%d@%H:%M:%S")
#%    -x, --ignorelock              Ignore if lock file exists
#%    -h, --help                    Print this help
#%    -v, --version                 Print script information
#%
#% EXAMPLES
#%    ${SCRIPT_NAME} -o DEFAULT <commands>
#%
#%    commands:
#%      getApplicationID    - get application id by name
#%      setDeploymentMarker - Create a deployment marker using default time generated by new relic.
#%      newrelicApmApplicationSearchName - using newrelic cli search by name for new relic apm application details.
#%      newrelicApmDeploymentCreate - using newrelic cli create newrelic apm deployment marker.
#%      newrelicApmDeploymentDelete - using newrelic cli delete newrelic apm deployment marker.
#%      newrelicApmDeploymentList   - using newrelic cli list newrelic apm deployment markers.
#%
#%    ** Please export the values for the required environment variables.
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} 1.0.0
#-    author          Gerald Bennett
#-    license         CC-BY-SA Creative Commons License
#-    script_id       1
#-
#================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
#================================================================
# END_OF_HEADER
#================================================================

set -e
set -o pipefail

  #== usage functions ==#
usage() { printf "Usage:"; scriptinfo usg ; }
usagefull() {
  scriptinfo ful ;
}

scriptinfo() {
  headFilter="^#-"
	[[ "$1" == "usg" ]] && headFilter="^#+"
	[[ "$1" == "ful" ]] && headFilter="^#[%+]"
	[[ "$1" == "ver" ]] && headFilter="^#-"
	head -"${SCRIPT_HEADSIZE:-99}" "${0}" | grep -e "${headFilter}" | sed -e "s/${headFilter}//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";
}

#================================================================
#  FILES AND VARIABLES
#================================================================

  #== general variables ==#
SCRIPT_NAME="$(basename "${0}")" # scriptname without path
SCRIPT_DIR="$( cd "$(dirname "$0")" && pwd )" # script directory
SCRIPT_FULLPATH="${SCRIPT_DIR}/${SCRIPT_NAME}"

SCRIPT_ID="$(scriptinfo ver | grep script_id | tr -s ' ' | cut -d' ' -f3)"
SCRIPT_HEADSIZE=$(grep -sn "^# END_OF_HEADER" "${0}" | head -1 | cut -f1 -d:)

SCRIPT_UNIQ="${SCRIPT_NAME%.*}.${SCRIPT_ID}.${HOSTNAME%%.*}"
SCRIPT_UNIQ_DATED="${SCRIPT_UNIQ}.$(date "+%y%m%d%H%M%S").${$}"

SCRIPT_DIR_TEMP="/tmp" # Make sure temporary folder is RW
SCRIPT_DIR_LOCK="${SCRIPT_DIR_TEMP}/${SCRIPT_UNIQ}.lock"

LOG_FILE="/tmp/$(basename "$0").log"
readonly LOG_FILE
info()    { echo "[INFO]    $*" | tee -a "$LOG_FILE" >&2 ; }
warning() { echo "[WARNING] $*" | tee -a "$LOG_FILE" >&2 ; }
error()   { echo "[ERROR]   $*" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo "[FATAL]   $*" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }

#================================================================
COMMAND=${COMMAND:-$1}

if [ -z "$COMMAND" ]; then
  COMMAND=usage
fi

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  flag=0
  param=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -f | --flag) flag=1 ;; # example flag
    -p | --param) # example named parameter
      param="${2-}"
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ -z "${param-}" ]] && die "Missing required parameter: param"
  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

# parse_params "$@"
setup_colors

# script logic here
# msg "- flag: ${flag}"
# msg "- param: ${param}"
# msg "- arguments: ${args[*]-}"

declare GITHUB_HOST=moc.buhtig
declare GIT_REPO_PARENT_DIR=${HOME}/workspace/git/${GITHUB_HOST}/drgeb
declare GIT_REPO_DIR=${GIT_REPO_PARENT_DIR}/mac-dev-playbook

declare BITBUCKET_HOST=gro.tekcubtib
declare BITBUCKET_REPO_PARENT_DIR=${HOME}/workspace/git/${BITBUCKET_HOST}/drgeb

declare REPO_URL=https://${GITHUB_HOST}/drgeb/mac-dev-playbook.git
declare BREW_CMD=$(which brew)
declare SQLITE_CMD="sqlite"
declare ANSIBLE_CMD="ansible"
declare PIP_CMD="pip3"
declare VIRTUAL_ENVS_DIR=~/.virtualenvs

################################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=$(ls -ld "$PRG")
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/.." >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="mac-dev-playbook"
APP_BASE_NAME=`basename "$0"`

#echo APP_BASE_NAME=${APP_BASE_NAME}
#echo APP_HOME =${APP_HOME}
################################################################################
brew_install() {
    msg "\nInstalling $1"
    if brew list $1 &>/dev/null; then
        msg "${RED}${1} is already installed:${NOFORMAT}"
    else
        brew install $1 && echo "$1 is installed"
    fi
}

################################################################################
# Bash "strict" mode
IFS=$'\n\t'

################################################################################
# Install the Command Line Tools
installCommandLineTools() {
    msg "\nInstalling XCode Command Line Tools"
    set +e
    xcode-select -p 2>&1 > /dev/null
    RETVAL=$?
    set -e
    if [[ "$RETVAL" -ne "0" ]]; then
        xcode-select --install
        read -p "Continue? [Enter]"
    else
        msg "${RED}XCode Command Line Tools is already installed:${NOFORMAT}"
    fi
}
################################################################################
# Install brew
installBrew() {
    msg "\nInstalling brew."
    if [[ ! -x "${BREW_CMD}" ]]; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
        msg "${RED}Brew is already installed:${NOFORMAT}"
    fi
    eval "$(${BREW_CMD} shellenv)"
}

################################################################################
# This homebrew/dupes is deprecated
# brew tap homebrew/dupes
#brew tap aws/tap
#brew tap bramstein/webfonttools
#brew tap caryll/tap
#brew tap cloudfoundry/tap
#brew tap d12frosted/emacs-plus
#brew tap goreleaser/tap
#brew tap jenkins-x/jx
#brew tap pivotal/tap
#brew tap weaveworks/tap
#brew tap webhookrelay/tap
#brew tap yschimke/tap

################################################################################
installSQLLite() {
    # Install sqllite
    brew_install "sqlite"
}

################################################################################
installASDF() {
    # Install ASDF
    export ASDF_VERSION=v0.10.0
    if [ ! -d ~/.asdf ]; then
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch ${ASDF_VERSION}
    else
        msg "${RED}ASDF is already installed:${NOFORMAT}"
    fi
    ################################################################################
    # Install ASDF java, python, nodejs plugins
    asdf plugin add python
    asdf plugin add java
    asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git

    # Install ASDF python latest version
    asdf install python 3.10.4
    asdf install java corretto-8.322.06.4

    # Setup global python version to latest
    asdf global python 3.10.4
    asdf global java corretto-8.322.06.4
}

################################################################################
upgradePip() {
    # Upgrade pip
    python3 -m pip install --upgrade pip
}

################################################################################
setupVirtualEnvAnsible() {
    # Setup virtualenv called ansible
    # Activate this new virtualenv
    if [ ! -d ${VIRTUAL_ENVS_DIR} ]; then
        mkdir ${VIRTUAL_ENVS_DIR}
    fi
    if [ ! -d ${VIRTUAL_ENVS_DIR}/ansible ]; then
        python3 -m venv ${VIRTUAL_ENVS_DIR}/ansible
    fi
    # Activate this new virtualenv
    if [ -f ${VIRTUAL_ENVS_DIR}/ansible/bin/activate ]; then
        source ${VIRTUAL_ENVS_DIR}/ansible/bin/activate
    fi
    pip install --upgrade pip
    python3 -m pip install ansible
    python3 -m pip install argcomplete

    ###########################################################################
    # Update Pip2 packages
    echo "Upgrade pip, setuptools and wheel packages"
    ${PIP_CMD} install -U pip setuptools wheel lxml

    # Install Ansible
    if [[ ! -x "${ANSIBLE_CMD}" ]]; then
        msg "\nInstalling ansible"
        ${PIP_CMD} install ansible kerberos pywinrm
    fi
}

################################################################################
# Configure initial setup ssh for github and bitbucket
configureGITHUBWorkSpace() {
    if [ ! -d ${GIT_REPO_PARENT_DIR} ]; then
        mkdir -pv ${GIT_REPO_PARENT_DIR}
    fi

    echo "setting up known_hosts"
    if [ -f ~/.ssh/known_hosts ]; then
        IS_HOST_DEFINED=$(grep ${GITHUB_HOST} ~/.ssh/known_hosts)
    else
        IS_HOST_DEFINED=""
    fi
    if [ "${IS_HOST_DEFINED}" != "" ]; then
        ssh-keyscan -H ${GITHUB_HOST} >> ~/.ssh/known_hosts
    else
        msg "${RED}GITHUB_HOST already setup:${NOFORMAT}"
    fi
}

configureBITBUCKETWorkSpace() {
    if [ ! -d ${BITBUCKET_REPO_PARENT_DIR} ]; then
        mkdir -pv ${BITBUCKET_REPO_PARENT_DIR}
    fi

    if [ -f ~/.ssh/known_hosts ]; then
        IS_HOST_DEFINED=$(grep ${BITBUCKET_HOST} ~/.ssh/known_hosts)
        if [ "${IS_HOST_DEFINED}" != "" ]; then
            ssh-keyscan -H ${BITBUCKET_HOST} >> ~/.ssh/known_hosts
        fi
    fi
}

################################################################################
cloneSetupMacDevPlayBook() {
    if [ ! -d ${GIT_REPO_PARENT_DIR} ]; then
            msg "\nInstalling requirements"
            cd ${GIT_REPO_PARENT_DIR} || exit
            git clone ${REPO_URL}
            cd mac-dev-playbook || exit
            ansible-galaxy role install -r ${APP_HOME}/roles/requirements.yml
            ansible-galaxy collection install -r ${APP_HOME}/roles/requirements.yml
    fi
}

setupLogsDir() {
    if [ ! -d ${HOME}/logs ]; then
        mkdir ${HOME}/logs
    fi
}

case ${COMMAND} in
    usage)
        usagefull
        ;;
    installCommandLineTools)
        installCommandLineTools
        ;;
    installBrew)
        installBrew
        ;;
    installSQLLite)
        installSQLLite
        ;;
    installASDF)
        installASDF
        ;;
    upgradePip)
        upgradePip
        ;;
    setupVirtualEnvAnsible)
        setupVirtualEnvAnsible
        ;;
    configureGITHUBWorkSpace)
        configureGITHUBWorkSpace
        ;;
    configureBITBUCKETWorkSpace)
        configureBITBUCKETWorkSpace
        ;;
    cloneSetupMacDevPlayBook)
        cloneSetupMacDevPlayBook
        ;;
    setupLogsDir)
        setupLogsDir
        ;;
    setup)
        installBrew
        setupLogsDir
        installSQLLite
        installASDF
        installCommandLineTools
        setupVirtualEnvAnsible
        upgradePip
        configureGITHUBWorkSpace
        configureBITBUCKETWorkSpace
        cloneSetupMacDevPlayBook
        ;;
    *)
      usagefull
      ;;
esac
#ansible-pull -U ${REPO_URL} -i wsl --vault-password-file ~/.ssh/.ansible_vault_system_configs | tee ${HOME}/logs/bootstrap.log
